# generated by datamodel-codegen:
#   filename:  user_principal_response.json
#   timestamp: 2023-01-02T19:10:25+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, conint


class StreamerInfo(BaseModel):
    streamerBinaryUrl: Optional[str] = None
    streamerSocketUrl: Optional[str] = None
    token: Optional[str] = None
    tokenTimestamp: Optional[datetime] = None
    userGroup: Optional[str] = None
    accessLevel: Optional[str] = None
    acl: Optional[str] = None
    appId: Optional[str] = None


class ProfessionalStatus(str, Enum):
    PROFESSIONAL = 'PROFESSIONAL'
    NON_PROFESSIONAL = 'NON_PROFESSIONAL'
    UNKNOWN_STATUS = 'UNKNOWN_STATUS'


class Quotes(BaseModel):
    isNyseDelayed: Optional[bool] = False
    isNasdaqDelayed: Optional[bool] = False
    isOpraDelayed: Optional[bool] = False
    isAmexDelayed: Optional[bool] = False
    isCmeDelayed: Optional[bool] = False
    isIceDelayed: Optional[bool] = False
    isForexDelayed: Optional[bool] = False


class Key(BaseModel):
    key: Optional[str] = None


class StreamerSubscriptionKeys(BaseModel):
    keys: Optional[List[Key]] = None


class DefaultEquityOrderLegInstruction(str, Enum):
    BUY = 'BUY'
    SELL = 'SELL'
    BUY_TO_COVER = 'BUY_TO_COVER'
    SELL_SHORT = 'SELL_SHORT'
    NONE = 'NONE'


class DefaultEquityOrderType(str, Enum):
    MARKET = 'MARKET'
    LIMIT = 'LIMIT'
    STOP = 'STOP'
    STOP_LIMIT = 'STOP_LIMIT'
    TRAILING_STOP = 'TRAILING_STOP'
    MARKET_ON_CLOSE = 'MARKET_ON_CLOSE'
    NONE = 'NONE'


class DefaultEquityOrderPriceLinkType(str, Enum):
    VALUE = 'VALUE'
    PERCENT = 'PERCENT'
    NONE = 'NONE'


class DefaultEquityOrderDuration(str, Enum):
    DAY = 'DAY'
    GOOD_TILL_CANCEL = 'GOOD_TILL_CANCEL'
    NONE = 'NONE'


class DefaultEquityOrderMarketSession(str, Enum):
    AM = 'AM'
    PM = 'PM'
    NORMAL = 'NORMAL'
    SEAMLESS = 'SEAMLESS'
    NONE = 'NONE'


class MutualFundTaxLotMethod(str, Enum):
    FIFO = 'FIFO'
    LIFO = 'LIFO'
    HIGH_COST = 'HIGH_COST'
    LOW_COST = 'LOW_COST'
    MINIMUM_TAX = 'MINIMUM_TAX'
    AVERAGE_COST = 'AVERAGE_COST'
    NONE = 'NONE'


class OptionTaxLotMethod(str, Enum):
    FIFO = 'FIFO'
    LIFO = 'LIFO'
    HIGH_COST = 'HIGH_COST'
    LOW_COST = 'LOW_COST'
    MINIMUM_TAX = 'MINIMUM_TAX'
    AVERAGE_COST = 'AVERAGE_COST'
    NONE = 'NONE'


class EquityTaxLotMethod(str, Enum):
    FIFO = 'FIFO'
    LIFO = 'LIFO'
    HIGH_COST = 'HIGH_COST'
    LOW_COST = 'LOW_COST'
    MINIMUM_TAX = 'MINIMUM_TAX'
    AVERAGE_COST = 'AVERAGE_COST'
    NONE = 'NONE'


class DefaultAdvancedToolLaunch(str, Enum):
    TA = 'TA'
    N = 'N'
    Y = 'Y'
    TOS = 'TOS'
    NONE = 'NONE'
    CC2 = 'CC2'


class AuthTokenTimeout(str, Enum):
    FIFTY_FIVE_MINUTES = 'FIFTY_FIVE_MINUTES'
    TWO_HOURS = 'TWO_HOURS'
    FOUR_HOURS = 'FOUR_HOURS'
    EIGHT_HOURS = 'EIGHT_HOURS'


class Preferences(BaseModel):
    expressTrading: Optional[bool] = False
    directOptionsRouting: Optional[bool] = False
    directEquityRouting: Optional[bool] = False
    defaultEquityOrderLegInstruction: Optional[DefaultEquityOrderLegInstruction] = None
    defaultEquityOrderType: Optional[DefaultEquityOrderType] = None
    defaultEquityOrderPriceLinkType: Optional[DefaultEquityOrderPriceLinkType] = None
    defaultEquityOrderDuration: Optional[DefaultEquityOrderDuration] = None
    defaultEquityOrderMarketSession: Optional[DefaultEquityOrderMarketSession] = None
    defaultEquityQuantity: Optional[conint(ge=0)] = None
    mutualFundTaxLotMethod: Optional[MutualFundTaxLotMethod] = None
    optionTaxLotMethod: Optional[OptionTaxLotMethod] = None
    equityTaxLotMethod: Optional[EquityTaxLotMethod] = None
    defaultAdvancedToolLaunch: Optional[DefaultAdvancedToolLaunch] = None
    authTokenTimeout: Optional[AuthTokenTimeout] = None


class OptionTradingLevel(str, Enum):
    COVERED = 'COVERED'
    FULL = 'FULL'
    LONG = 'LONG'
    SPREAD = 'SPREAD'
    NONE = 'NONE'


class Authorizations(BaseModel):
    apex: Optional[bool] = False
    levelTwoQuotes: Optional[bool] = False
    stockTrading: Optional[bool] = False
    marginTrading: Optional[bool] = False
    streamingNews: Optional[bool] = False
    optionTradingLevel: Optional[OptionTradingLevel] = None
    streamerAccess: Optional[bool] = False
    advancedMargin: Optional[bool] = False
    scottradeAccount: Optional[bool] = False


class Account(BaseModel):
    accountId: Optional[str] = None
    description: Optional[str] = None
    displayName: Optional[str] = None
    accountCdDomainId: Optional[str] = None
    company: Optional[str] = None
    segment: Optional[str] = None
    surrogateIds: Optional[Dict[str, str]] = None
    preferences: Optional[Preferences] = None
    acl: Optional[str] = None
    authorizations: Optional[Authorizations] = None


class UserPrincipalOutput(BaseModel):
    authToken: Optional[str] = None
    userId: Optional[str] = None
    userCdDomainId: Optional[str] = None
    primaryAccountId: Optional[str] = None
    lastLoginTime: Optional[datetime] = None
    tokenExpirationTime: Optional[datetime] = None
    loginTime: Optional[datetime] = None
    accessLevel: Optional[str] = None
    stalePassword: Optional[bool] = False
    streamerInfo: Optional[StreamerInfo] = None
    professionalStatus: Optional[ProfessionalStatus] = None
    quotes: Optional[Quotes] = None
    streamerSubscriptionKeys: Optional[StreamerSubscriptionKeys] = None
    accounts: Optional[List[Account]] = None


class UserPrincipalResponse(BaseModel):
    output: UserPrincipalOutput
